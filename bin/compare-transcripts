#!/usr/bin/env perl
# compare-transcripts -- compare refseq and enst transcripts in Ensembl
# 2012-02-14 Reece Hart <reecehart@gmail.com>
#
# eg$ compare-transcripts 1 2 X Y


use strict;
use warnings;

use Bio::EnsEMBL::Registry;
use Data::Dumper;
use Digest::SHA qw(sha1_hex);

my @refseq_mrna_db_ids = qw(1801);
my @fmt_def = (
  [ 'id',           '%-15s' ],
  [ 'gene',         '%-15s' ],
  [ 'pseudo',       '%2s'   ],
  [ 'ccds',         '%-15s' ],
  [ 'refseq',       '%-15s' ],
  [ 'chr',          '%3s'   ],
  [ 'strand',       '%2s'   ],
  [ 'cds-length',   '%5d'   ],
  [ 'cds-start',    '%10d'  ],
  [ 'cds-end',      '%10d'  ],
  [ 'n-cds-exons',  '%2d'   ],
  [ 'cds-exons',    '%s'    ],
);
my $fmt = join(' ',map {$_->[1]} @fmt_def);
my @keys = map {$_->[0]} @fmt_def;


my $registry = 'Bio::EnsEMBL::Registry';
$registry->load_registry_from_db(
    -host => 'db-prd.locusdev.net',
    -user => 'anonymous'
);

my $sa = $registry->get_adaptor( 'Human', 'Core', 'Slice' );
my $ta = $registry->get_adaptor( 'Human', 'Core', 'Transcript' );

my $ofsa = $registry->get_adaptor( 'Human', 'OtherFeatures', 'Slice' );
my $ofta = $registry->get_adaptor( 'Human', 'OtherFeatures', 'Transcript' );


foreach my $chr (@ARGV) {
  my $chr_slice = $sa->fetch_by_region('Chromosome',$chr);

  # fetch all NMs from otherfeatures
  #my @tx = @{ $ofta->fetch_all() };
  my @tx = @{ $ofta->fetch_all_by_Slice($chr_slice) };
  my @rs_tx = grep { $_->display_id() =~ m/^NM_\d+\.\d+$/ } @tx;
  printf("# %d transcripts\n",$#rs_tx+1);

  # loop over NMs
  foreach my $rs_tx (@rs_tx) {
    # get info from RefSeq transcript
    my $rs_ti = tx_info($rs_tx);
    printf("%1s %-7s %s\n", '*', '', ti_format($rs_ti));

    # find all Ensembl transcripts overlapping the refseq feature
    my @e_tx = @{ $ta->fetch_all_by_Slice($rs_tx->feature_Slice()) };

    # loop over ENSTs, comparing each with the RefSeq
    for my $e_tx (@e_tx) {
      # get info on transcript, transformed to chromosomal coords
      # (same as RefSeqs)
      my $e_ti = tx_info($e_tx->transform('chromosome'));

      # don't bother comparing transcripts that differ by >10 nt
      next if abs($rs_ti->{'cds-length'} - $e_ti->{'cds-length'}) > 10;

	  # skip if transcripts don't match either cds or exon structure
	  next unless ($rs_ti->{'cds-sha1'} eq $e_ti->{'cds-sha1'}
					 or $rs_ti->{'cds-exons'} eq $e_ti->{'cds-exons'});

      # print transcript row; ti_cmp prefix is a summary of the comparison
      printf("%1s %-7s %s\n", '', ti_cmp($rs_ti,$e_ti), ti_format($e_ti));
    }
  }
}

exit(0);

############################################################################


sub ti_format {
  my $ti = shift;
  sprintf($fmt,@$ti{@keys})
}

sub ti_cmp {
  my ($t1,$t2) = @_;
  join('',
       ($t1->{'cds-length'}  == $t2->{'cds-length'}  ? 'L' : ' '),
       ($t1->{'n-cds-exons'} == $t2->{'n-cds-exons'} ? 'N' : ' '),
       ($t1->{'cds-exons'}   eq $t2->{'cds-exons'}   ? 'E' : ' '),
       ($t1->{'cds-sha1'}    eq $t2->{'cds-sha1'}    ? 'C' : ' '),
      )
}

sub tx_info {
  my $t = shift;
  my $cds_start = $t->coding_region_start();
  my $cds_end = $t->coding_region_end();
  my $cds_seq = $t->translateable_seq();
  my @cds_exons_se = map {[$_->start(),$_->end()]} @{ $t->get_all_translateable_Exons() };
  my $pseudo = $cds_seq eq '';				# cds empty => pseudogene
  # or do I want seq_region_name since we're should be at the chromosome level?
  my ($chr) = $t->slice()->name() =~ m/chromosome:GRCh37:([^:]+):/;
  my $g = $t->get_Gene();
  my $gene_name = $g->display_id();
  my @dblinks = @{$g->get_all_DBLinks()};   # perhaps empty
  my $ccds   = join(',',uniq(grep {/^CCDS/} map {$_->display_id()} @dblinks));
  my $refseq = join(',',uniq(grep {/^NM/}   map {$_->display_id()} @dblinks));
  return {
    'id' => $t->display_id(),
    'chr' => $chr,
    'gene' => $gene_name,
    'pseudo' => $pseudo,
    'ccds' => $ccds,
    'refseq' => $refseq,
    'strand' => $t->strand(),
    'cds-start' => $t->coding_region_start(),
    'cds-end' => $t->coding_region_end(),
    'cds-length' => length($cds_seq),
    'n-cds-exons' => $#cds_exons_se+1,
    'cds-exons' => se_str(@cds_exons_se),
    'cds-sha1' => sha1_hex($cds_seq),
  };
}


sub uniq {
  return keys %{{ map {$_=>1} @_ }};
}

sub se_str {
  join(',', map {sprintf('[%s,%s]', $_->[0]||'?', $_->[1]||'?')} @_);
}
