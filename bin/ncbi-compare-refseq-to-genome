#!/usr/bin/env python

# PYTHONPATH=~/projects/locus-python/lib ./bin/ncbi-compare-refseq-to-genome NM_000051.3

# TODO: add timing to download and alignment segments
# TODO: add # splice forms

from __future__ import print_function

import logging, os, pprint, sys, traceback, urllib2
from collections import defaultdict, namedtuple
from lxml.etree import XML

import IPython

from cogent.db.ncbi import EFetch,ELink,ELinkResultParser,ESearch,ESearchResultParser
from cogent.util.misc import reverse_complement
from Bio.Emboss.Applications import NeedleCommandline
from Bio import AlignIO
from StringIO import StringIO
#import nwalign
import bitlyapi

sys.path[0:0] = [os.path.join(os.path.dirname(
    os.path.dirname(__file__)),'lib/python')]
from locus.core.exceptions import LocusError
from locus.utils.memoize_mongo import memoize
from locus.ncbi.refseq import RefSeq
from locus.ncbi.gene import Gene
from locus.utils.genomeutils import chr_to_NC, strip_chr


eutils_defaults = {
    'tool': sys.argv[0],
    'email': 'reecehart@gmail.com',
    'retmax': 5,
    'retmode': 'xml'
    }


bitly = bitlyapi.BitLy(
    'locusdevelopment',
    'R_a1e659c6d003a59a55e280eda8480564'
    )

logging.basicConfig(level=logging.WARN)

es = ESearch(rettype='uilist',**eutils_defaults)
ef = EFetch(**eutils_defaults)
el = ELink(**eutils_defaults)


_Mismatch = namedtuple('Mismatch', [
        'chr', 'strand', 'g_start', 'g_end', 'g_aseq',
        'ac', 'exon', 'e_start', 'e_end',
        't_start', 't_end', 't_aseq',
        'c_start', 'c_end',
        'type', 
        ])
class Mismatch(_Mismatch):
    @property
    def seqviewer_url(self):
        return url_for_slice(self.chr, self.g_start - 50, self.g_end + 50)
    @property
    def hgvs_range(self):
        r = self.ac + ':c.' + self.c_start
        if self.c_start != self.c_end:
            r += '_' + self.c_end
        return r


# I got truncated replies from NCBI. They got memoized. 
# Here's how I deleted them:
# $ mongo db.locusdev.net/memoize-reece
# > db.esearch_ac.remove( {$where: "this.value.indexOf('</eSearchResult>') == -1 "} );
# > db.efetch_nuccore_ui.remove( {$where: "this.value.indexOf('</GBSet>') == -1 "} );
# > db.efetch_gene_by_gene_id.remove( {$where: "this.value.indexOf('</Entrezgene-Set>') == -1 "} );
# And then I added assertions to validate the return before they're memoized

@memoize
def esearch_ac(ac):
    xml = es.read(term='%s[accn]'%(ac))
    assert '</eSearchResult>' in xml, "received malformed reply from NCBI"
    return xml

@memoize
def elink_nucleotide_ui_to_gene(ui):
    xml = el.read(dbfrom='nuccore',db='gene',linkname='nuccore_gene',id=ui)
    assert '</eLinkResult>' in xml, "received malformed reply from NCBI"
    return xml

@memoize
def efetch_nuccore_ui(ui):
    xml = ef.read(db='nuccore',id=ui,retmode='xml',rettype='gb')
    assert '</GBSet>' in xml, "received malformed reply from NCBI"
    return xml

@memoize
def efetch_gene_by_gene_id(gene_id):
    xml = ef.read(db='gene',id=gene_id)
    assert '</Entrezgene-Set>' in xml, "received malformed reply from NCBI"
    return xml


def fetch_genomic_sequence_interval(chr,start,end):
    if False:
        return fetch_genomic_sequence_interval_ensembl(chr,start,end)
    return str(fetch_genomic_sequence_interval_ucsc(chr,start,end))

@memoize
def fetch_genomic_sequence_interval_ucsc(chr,start,end):
    url = ('http://genome.ucsc.edu/cgi-bin/das/hg19/dna?'
           'segment=chr{chr}:{start},{end}').format(chr=chr,start=start,end=end)
    r = XML(urllib2.urlopen(url).read())
    return r.find('SEQUENCE/DNA').text.replace('\n','')


@memoize
def align2(seqa,seqb):
    if seqa == seqb:
        return seqa,seqb
    cline = NeedleCommandline(asequence='asis:'+seqa, bsequence='asis:'+seqb,
                              gapopen=10,gapextend=0.5,auto=True,filter=True,stdout=True)
    o,e = cline()
    aln = AlignIO.read(StringIO(o),'emboss')
    return aln[0].seq.tostring(),aln[1].seq.tostring()


# def align2b(seqa,seqb):
#     if seqa == seqb:
#         return seqa,seqb
#     return nwalign.global_align(seqa,seqb,gap_open=-10,gap_extend=0.5)

# WARNING: apparent bug with nwalign (align2b):
# This is from a real case (can't remember the transcript AC)
# In [31]: bseq = 'acagagccattaatcttgtagcttcatcaacattaactggtttgctttcatgacgctgctgaggaat'; 
# l2 = (len(bseq)-6)/2; aseq = bseq[:l2] + bseq[-l2:]
# 
# In [32]: align2(aseq,bseq)
# Out[32]: 
# [u'acagagccattaatcttgtagcttcatcaa-------tggtttgctttcatgacgctgctgaggaat',
#  u'acagagccattaatcttgtagcttcatcaacattaactggtttgctttcatgacgctgctgaggaat']
# 
# In [33]: align2b(aseq,bseq)
# Out[33]: 
# ('acagagccattaatcttgtagcttcat---c---aa-tggtttgctttcatgacgctgctgaggaat',
#  'acagagccattaatcttgtagcttcatcaacattaactggtttgctttcatgacgctgctgaggaat')



def intervals_to_starts_ends_lengths(exon_intervals):
    starts = [ e[0] for e in exon_intervals ]
    ends = [ e[1] for e in exon_intervals ]
    lengths = [ e[1]-e[0]+1 for e in exon_intervals ]
    return starts,ends,lengths

def coalesce(*args):
    return next(s for s in args if s is not None)

def process1(acv):
    """acv == ACcession.Version string"""
    rv = {}
    rv.update({ 
            'ac_status': 'cur',
            'mismatches': [],
            'ex_len_eq': None,
            })

    try:
        # search for acv
        esr = ESearchResultParser( esearch_ac(acv) )
        if esr.Count == 0:
            rv['ac_status'] = 'obs'
            rv['comment'] = 'obsolete refseq'
            return rv
        assert esr.Count == 1, "Got more than one uid for %s[accn]: %s"%(
            acv,pprint.pformat(esr.IdList))
        ui = esr.IdList[0]
        rs = RefSeq( efetch_nuccore_ui(ui) )

        elr = ELinkResultParser( elink_nucleotide_ui_to_gene(ui) )
        assert len(elr) == 1, "Got more than one gene for ui="+ui
        gene_id = elr[0]
        g = Gene(efetch_gene_by_gene_id(gene_id))
        m = g.grch37p5_mapping()
        g_exons = g.grch37p5_product_exons(acv)
        t_exons = rs.exons()
        g_exon_lengths = intervals_to_starts_ends_lengths(g_exons)[2]
        t_exon_lengths = intervals_to_starts_ends_lengths(t_exons)[2]

        rv['ui'] = ui
        rv['gene_id'] = gene_id
        rv['gene'] = g.locus()
        rv['strand'] = m['strand'] or ''
        rv['chr'] = rs.chr()
        rv['loc'] = g.maploc() or rv['chr'] or ''
        rv['mismatches'] = []
        rv['cds'] = '-'.join([ str(p) for p in rs.cds_start_end()[:] ])
        rv['comment'] = None;

        # compare number of exons and lengths of exons
        rv['n_g_exons'] = len(g_exon_lengths)
        rv['n_t_exons'] = len(t_exon_lengths)
        rv['ex_n_eq'] = rv['n_g_exons'] == rv['n_t_exons']
        if not rv['ex_n_eq']:
            raise Exception('different number of exons')
            rv['comment'] = 'different number of exons'
            return rv
        rv['ex_len_eq'] = t_exon_lengths == g_exon_lengths

        t_seq = rs.seq()
        g_chr = rs.chr()
        t_ex_cum_len = 0       # cumulative length from cds start
        cds_start,cds_end = rs.cds_start_end()

        for exon_i in range(len(t_exons)):
            g_ex_start, g_ex_end = g_exons[exon_i]
            g_ex_seq = fetch_genomic_sequence_interval(rv['chr'],g_ex_start+1,g_ex_end+1)

            t_ex_start, t_ex_end = t_exons[exon_i]
            t_ex_seq = t_seq[t_ex_start-1:t_ex_end] # 0-based, half-open
            e_off, e_dir = 0, 1
            if rv['strand'] == 'minus':
                t_ex_seq = reverse_complement(t_ex_seq)
                e_off, e_dir = len(t_ex_seq), -1

            g_ex_aseq,t_ex_aseq = align2(g_ex_seq,t_ex_seq)
            assert len(g_ex_aseq)==len(t_ex_aseq), "global alignment should be same length"
            d = ''.join([ d if d is not None else ' ' 
                          for d in [ _diff_type(g_ex_aseq[i],t_ex_aseq[i]) 
                                     for i in range(len(g_ex_aseq)) ] ])
            e_end = 0
            for e_start in range(len(t_ex_aseq)):
                # find contiguous right-open range of same diff type
                # contiguous range as [start,end)
                # almost all of these will be [i,i+1)

                if e_start < e_end: # advance the loop past any ranged
                    continue        # variants from a previous iteration

                dt = _diff_type(g_ex_aseq[e_start],t_ex_aseq[e_start])
                if dt is None:
                    continue
                for e_end in range(e_start,len(t_ex_aseq)):
                    if dt != _diff_type(g_ex_aseq[e_end],t_ex_aseq[e_end]):
                        break

                g_start = g_ex_start + e_start
                g_end   = g_ex_start + e_end
                t_start = t_ex_cum_len + e_off + e_dir * e_start
                t_end   = t_ex_cum_len + e_off + e_dir * e_end
                if rv['strand'] == 'minus':
                    t_start,t_end = t_end,t_start
                c_start = cdot(cds_start,cds_end,t_start)
                c_end   = cdot(cds_start,cds_end,t_end-1) # end is right-open
                m = Mismatch(
                    type = dt,
                    ac = acv,
                    strand = rv['strand'], chr = rv['chr'], 
                    exon = exon_i + 1, e_start = e_start, e_end = e_end,
                    g_start = g_start, g_end = g_end, g_aseq = g_ex_aseq[e_start:e_end],
                    t_start = t_start, t_end = t_end, t_aseq = t_ex_aseq[e_start:e_end], # keep + stranded
                    c_start = c_start, c_end = c_end,
                    )
                rv['mismatches'] += [m]
                e_start = e_end
            t_ex_cum_len += len(t_ex_seq)
    except Exception as e:
        rv['comment'] = (''.join(traceback.format_exception(type(e),e.message,None))).rstrip()
        return rv
    return rv


def cdot(cds_start,cds_end,r):
    c = r - (cds_start-1)
    if c > cds_end:
        return '*' + str(r-(cds_end-1)+1)
    else:
        return str(c+1)

@memoize
def url_for_slice(c,s,e):
    url_fmt = (
        'http://www.ncbi.nlm.nih.gov/projects/sviewer/?id={nc}'
        '&noslider=1&tracks=[key:sequence_track,name:Sequence,'
        'display_name:Sequence,category:Sequence,annots:Sequence'
        ',ShowLabel:false][key:gene_model_track,name:Genes---Unnamed'
        ',display_name:Genes,category:Genes,annots:Unnamed,Options'
        ':MergeAll,SNPs:false,CDSProductFeats:false,'
        'ShowLabelsForAllFeatures:false,HighlightMode:2][key:'
        'alignment_track,name:Alignments---NG%20Alignments,'
        'display_name:NG%20Alignments,category:Alignments,'
        'annots:NG%20Alignments,Layout:Adaptive1000,StatDisplay'
        ':-1,LinkMatePairAligns:true,Color:true,AlignedSeqFeats'
        ':false,Label:true][key:alignment_track,name:Alignments'
        '---Refseq%20Alignments,display_name:Refseq%20Alignments'
        ',category:Alignments,annots:Refseq%20Alignments,Layout'
        ':Adaptive1000,StatDisplay:-1,LinkMatePairAligns:true'
        ',Color:true,AlignedSeqFeats:false,Label:true]&mk=&color'
        '=0&label=0&decor=0&spacing=0&v={start}:{end}&c='
        '33cccc&gflip=false&select='
        'gi|224589812-0390e571-039b5700-0103-dee8c202-ffea8d58'
        )
    nc = chr_to_NC[strip_chr(c)]
    url = url_fmt.format(nc=nc,  start=str(s), end=str(e))
    res = bitly.shorten(longUrl=url)
    return res['url']

def strand_sign(s):
    if s == 'plus': return '+'
    if s == 'minus': return '-'
    else: return ''

def _diff_type(nt1,nt2):
    if (nt1 == '-'): return 'I'
    if (nt2 == '-'): return 'D'
    if (nt1 != nt2): return 'S'
    return None


for acv in sys.argv[1:]:
    rv = process1(acv)
    if rv['ac_status'] == 'obs':
        logging.warn(acv + ' is obsolete')
        continue
    rv['ss'] = strand_sign(rv['strand']) + rv['loc']
    rv['mms'] = '%sS/%sI/%sD' % (
        len([ mm for mm in rv['mismatches'] if mm.type == 'S' ]),
        len([ mm for mm in rv['mismatches'] if mm.type == 'I' ]),
        len([ mm for mm in rv['mismatches'] if mm.type == 'D' ]),
        )
    if rv['comment']: rv['comment'] = '#' + rv['comment']
    print('*', '\t'.join( str(e) for e in [ 
                acv, rv['ac_status'], rv['gene'],  rv['cds'], 
                rv['ss'], rv['n_t_exons'],
                rv['ex_n_eq'], rv['ex_len_eq'],  
                rv['mms'], rv['comment'],
                ]))
    for mm in rv['mismatches']:
        print('\t'+'\t'.join([ str(e) 
                               for e in [mm.chr,mm.g_start+1,mm.g_end,
                                         mm.exon,mm.e_start+1,mm.e_end,
                                         mm.type,mm.hgvs_range,
                                         mm.g_aseq+'/'+mm.t_aseq, mm.seqviewer_url] ]))
