#!/usr/bin/env python

import logging, os, pprint, sys

from cogent.db.ncbi import EFetch,ELink,ELinkResultParser,ESearch,ESearchResultParser

sys.path[0:0] = [os.path.join(os.path.dirname(
    os.path.dirname(__file__)),'lib/python')]
from locus.utils.memoize import memoize
from locus.ncbi.refseq import RefSeq
from locus.ncbi.gene import Gene

eutils_defaults = {
    'tool': sys.argv[0],
    'email': 'reecehart@gmail.com',
    'retmax': 5,
    'retmode': 'xml'
    }

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

es = ESearch(rettype='uilist',**eutils_defaults)
ef = EFetch(**eutils_defaults)
el = ELink(**eutils_defaults)


@memoize
def esearch_ac(ac):
    return es.read(term='%s[accn]'%(ac))

@memoize
def efetch_nuccore_ui(ui):
    return ef.read(db='nuccore',id=esr.uilist()[0],retmode='xml',rettype='gb')

@memoize
def elink_nucleotide_ui_to_gene(ui):
    return el.read(dbfrom='nuccore',db='gene',
                   linkname='nuccore_gene',id=ui)

@memoize
def efetch_gene_by_gene_id(gene_id):
    return ef.read(db='gene',id=gene_id)


acv = 'NM_006158.3'

esr = ESearchResultParser( esearch_ac(acv) )
assert esr.Count == 1, "Got more than one uid for %s[accn]"%(ac)
ui = esr.IdList[0]
rs = RefSeq( efetch_nuccore_ui(ui) )

elr = ELinkResultParser( elink_nucleotide_ui_to_gene(ui) )
assert len(elr) == 1, "Got more than one gene for ui="+ui
g = Gene(efetch_gene_by_gene_id(elr[0]))

